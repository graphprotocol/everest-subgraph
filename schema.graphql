"A project is created once the listing's been approved"
interface Project {
  "Unique ID for the project"
  id: ID!
  "Ethereum address of the listing owner"
  owner: Bytes!
  "Name of the project"
  name: String!
  "Description of what the project is"
  description: String
  "Image URL or Base64 encoded string"
  logo: String
  "The company's main website address"
  website: String
  "URL to the project's main blog"
  blog: String
  "URL to Twitter or other public social feed"
  socialFeed: String
  "URL to the project's source code management tool"
  sourceCode: String
  "Creation timestamp"
  createdAt: Int
  "Updated timestamp"
  updatedAt: Int
}

type DAppProject  implements Project @entity {
  "Unique ID for the project"
  id: ID!
  "Ethereum address of the listing owner"
  owner: Bytes!
  "Name of the project"
  name: String!
  "Description of what the project is"
  description: String
  "Image URL or Base64 encoded string"
  logo: String
  "The company's main website address"
  website: String
  "URL to the project's main blog"
  blog: String
  "URL to Twitter or other public social feed"
  socialFeed: String
  "URL to the project's source code management tool"
  sourceCode: String
  "Creation timestamp"
  createdAt: Int
  "Updated timestamp"
  updatedAt: Int
  "Project categories"
  dappCategories: [DAppCategory!]
}

type FinanceProject  implements Project @entity {
  "Unique ID for the project"
  id: ID!
  "Ethereum address of the listing owner"
  owner: Bytes!
  "Name of the project"
  name: String!
  "Description of what the project is"
  description: String
  "Image URL or Base64 encoded string"
  logo: String
  "The company's main website address"
  website: String
  "URL to the project's main blog"
  blog: String
  "URL to Twitter or other public social feed"
  socialFeed: String
  "URL to the project's source code management tool"
  sourceCode: String
  "Creation timestamp"
  createdAt: Int
  "Updated timestamp"
  updatedAt: Int
  "Project categories"
  financeCategories: [FinanceCategory!]
}

type ServiceProviderProject implements Project @entity {
  "Unique ID for the project"
  id: ID!
  "Ethereum address of the listing owner"
  owner: Bytes!
  "Name of the project"
  name: String!
  "Description of what the project is"
  description: String
  "Image URL or Base64 encoded string"
  logo: String
  "The company's main website address"
  website: String
  "URL to the project's main blog"
  blog: String
  "URL to Twitter or other public social feed"
  socialFeed: String
  "URL to the project's source code management tool"
  sourceCode: String
  "Creation timestamp"
  createdAt: Int
  "Updated timestamp"
  updatedAt: Int
  "Project categories"
  serviceProviderCategories: [ServiceProviderCategory!]
}

enum Category {
  Protocol
  DApp
  Fund
  Accelerator
  ServiceProvider
}

enum DAppCategory {
  Social
  Finance
  Governance
  Games
  Adult
  Marketplaces
  Collectibles
  Utilities
}

enum FinanceCategory {
  Lending
  Exchange
  Synthetics
  Wallet
  Payments
}

enum ServiceProviderCategory {
  Development
  Design
  Marketing
  Security
  Staking
  PR
}

type Submission @entity {
  "Unique ID for the submission"
  id: ID!
  listing: Listing!
  curator: Curator!
  vote: Vote
  amount: Int!
  claimed: Boolean!
}

# AKA ballot, poll, and tally
type Listing @entity {
  # Ballot values
  "Unique ID for the listing"
  id: ID!
  action: BallotType!
  applicant: Curator!
  "IPFS hash"
  metadataHash: Metadata!
  status: ListingStatus!
  entry: String!
  amount: BigDecimal!

  # Tally values
  yesVotes: BigDecimal!
  noVotes: BigDecimal!
  unrevealedAmountTotal: BigDecimal!

  # Poll values
  startTime: Int!
  endTime: Int!
  revealTime: Int!

  # Submissions
  submissions: [Submission!] @derivedFrom(field: "listing")

  # Total claimed
  tokensClaimed: BigDecimal!
}

type Metadata @entity {
  "IPFS hash for the metadata"
  id: ID!
  "Name of the project"
  name: String!
  "Description of what the project is"
  description: String
  "Image URL or Base64 encoded string"
  logo: String
  "The project category"
  category: Category!
  "The category types as a string"
  categories: [String!]
  "The company's main website address"
  website: String
  "URL to the project's main blog"
  blog: String
  "URL to Twitter or other public social feed"
  socialFeed: String
  "URL to the project's source code management tool"
  sourceCode: String
}

enum ListingStatus {
  Voting
  Approved
  Rejected
}

enum Vote {
  Null
  Yes
  No
}

enum BallotType {
  Null
  Add
  Remove
}

type Token @entity {
  "TCR token address"
  id: ID!
  name: String!
  symbol: String!
  decimals: String!
  owner: Bytes!
  totalSupply: BigDecimal!
}

"An account that has received tokens and/or voted"
type Curator @entity {
  "The Ethereum address of the curator"
  id: ID!
  "All previous votes performed by the curator"
  votes: [Submission!] @derivedFrom(field: "curator")
  "The number of tokens that the curator holds"
  tokenBalance: BigDecimal!
}

# TCR also contains token data
type TCR @entity {
  "TCR Contract address"
  id: ID!
  tcrAddress: Bytes!
  owner: Bytes!
  votingDurationSecs: Int!
  revealDurationSecs: Int!
  name: String!
  symbol: String!
  decimals: Int!
  bootstrapListAddress: Bytes!
  totalSupply: BigDecimal!

  bootstrapAddresses: [Bytes!]
  startDate: Int
  ready: Boolean!
  memberIndex: BigInt!
  currentBallotIndex: BigInt!
}